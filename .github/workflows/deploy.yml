name: Node.js CI

# 구독할 이벤트
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

# jobs 단위로 개별 서버(정확히는 Docker 컨테이너 단위라고 한다.)에서 작업이 수행된다.
# 각 작업은 병렬로 실행 된다고 하는데, needs: build와 같이 표시해서 기다릴 수도 있다.
jobs:
  build_and_deploy:
    name: lambda-runtime
    # Ubuntu, Windows, MacOS를 지원한다.
    runs-on: ubuntu-latest

    # node-version 과 같이 배열로 돼있으면, 해당 원소를 순회하면서 작업이 반복해서 실행된다.
    # 응용해서 runs-on에 여러 OS에서 돌릴 수도 있다.
    strategy:
      matrix:
        node-version: [18.16.x] # 템플릿 기본값: [10.x, 12.x, 14.x]

    # uses 개념은 다른 사람이 작성한 내용을 실행하는 개념이다.
    # actions/checkout: GitHub의 마지막 커밋으로 Checkout 한다.
    # actions/setup-node: Node.js를 설치한다.
    # run 개념은 명령어를 실행한다. 셸 스크립트와 동일하다.
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: AKIA2JJFMBOZQFPWDMHT
          aws-secret-access-key: ${{ secrets.AWS_SSAFY_BOT_PW }}
          aws-region: ap-northeast-2
          
      - name: Set env variables
        working-directory: ./
        run: |
          pwd
          touch .env
          echo HOOK_URL = ${{ secrets.HOOK_URL }} >> .env
          cat .env
          
      - name: npm install
        working-directory: ./
        run: npm ci
        
      # --if-present 옵션은 npm 스크립트가 존재할 때만 실행시키라는 의미이다.
#       - name: Deploy
#         working-directory: ./
#         run: npm run build
